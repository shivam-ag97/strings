bool isvalid(string s)
{
    string t="";
    int n=s.length();
    for(int i=0;i<n;i++)
    {
        if(s[i]!='.')
        t=t+s[i];
        else
        {
            if(t.length()>1)
            {
                if(t[0]=='0')
                return false;
            }
            int temp=stoi(t);
            if(temp<0 || temp>255)
            return false;
            t="";
        }
    }
    
    if(t.length()>1)
    {
        if(t[0]=='0')
        return false;
    }
    int temp=stoi(t);
    if(temp>255)
    return false;
    
    return true;
    
}


vector<string> Solution::restoreIpAddresses(string A) {
    vector<string> result;
    
    int n=A.length();
    
    string s=A;
    
    for(int i=1;i<n-2;i++)
    {
        for(int j=i+1;j<n-1;j++)
        {
            for(int k=j+1;k<n;k++)
            {
                s=s.substr(0,k)+"."+s.substr(k);
                s=s.substr(0,j)+"."+s.substr(j);
                s=s.substr(0,i)+"."+s.substr(i);
                
                if(isvalid(s))
                result.push_back(s);
                s=A;
            }
        }
    }
    
    
    
    // string s1=""; 
    // string s3="";
    // string s4="";
    // string s2="";
    
    // s1=s1+A[0]+A[1]+'.'+A[2]+A[3]+A[4]+'.'+A[5]+A[6]+A[7]+'.'+A[8]+A[9]+A[10];
    
    // s2=s2+A[0]+A[1]+A[2]+'.'+A[3]+A[4]+'.'+A[5]+A[6]+A[7]+'.'+A[8]+A[9]+A[10];
    // s3=s3+A[0]+A[1]+A[2]+'.'+A[3]+A[4]+A[5]+'.'+A[6]+A[7]+'.'+A[8]+A[9]+A[10];
    // s4=s4+A[0]+A[1]+A[2]+'.'+A[3]+A[4]+A[5]+'.'+A[6]+A[7]+A[8]+'.'+A[9]+A[10];
    

    // if(isvalid(s1))
    // result.push_back(s1);
    
    // if(isvalid(s2))
    // result.push_back(s2);
    
    // if(isvalid(s3))
    // result.push_back(s3);
    
    // if(isvalid(s4))
    // result.push_back(s4);
    
    // sort(result.begin(),result.end());
    
    return result;
    
    
}
